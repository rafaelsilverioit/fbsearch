package persistence.entities;

import java.beans.PropertyVetoException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import persistence.dao.PostsAlertsDAO;
import util.DateManager;

/**
 * 
 * @author Rafael Silv√©rio Amaral
 * @email rafael.silverio.it@gmail.com
 */
public class PostAlertGroup {
	// It's the IDentification from the first post that was used to form this
	// group, (it's the post used in the search query), and will identify too
	// the group.
	private String groupId;
	// Post text message that was used to form this group (it's the post used in
	// the search query).
	private String text;
	// Control logical time - TODO
	private int logicalControl;
	// Number of users that posted the messages from this group (without
	// duplicate)
	private int userQuantity;
	// Number of posts that compose the group;
	private int postQuantity;
	// Date of first post
	private Date firstDate;
	// Date of last post
	private Date lastDate;
	// Stores all similar posts that form this group
	private List<Post> arraysSimilarPosts;
	// Security alert level
	private String alert = "medium"; // TODO - implement this
	// Number that indicates the importance or relevance of message of this
	// group. -1 disabled!
	private float burstNumber = -1;
	// Contants to be used in the message/group type
	public static final int TYPE_RELEVANT_ALERT_MESSAGE = 2;
	public static final int TYPE_IRRELEVANT_MESSAGE = 1;
	public static final int TYPE_DISCARTED_MESSAGE = 0;
	public static final int TYPE_UNKNOWN = 0;
	// Type of group, this can be: alert/relevant message, irrelevant message or
	// discarted message
	private int type = TYPE_UNKNOWN;

	/**
	 * Create a group of similar posts generated by a post search in Apache
	 * Lucene. Is required the groupdId from this group, the post message that
	 * generate this group and a file name to store informations from this
	 * group.
	 * 
	 * @param postTextMessage
	 *            - Post message that was used to generate this group.
	 * @param similarPOstsFromThisGroup
	 *            - List with posts that compose this group.
	 */
	public PostAlertGroup(String postTextMessage,
			List<Post> similarPostsFromThisGroup) {
		this.text = postTextMessage;
		this.arraysSimilarPosts = similarPostsFromThisGroup;
		this.postQuantity = similarPostsFromThisGroup.size();
	}

	/**
	 * Create a group of one post
	 * 
	 * @param post
	 */
	public PostAlertGroup(Post post) {
		SimplifiedPost simplePost = (SimplifiedPost) post;

		this.groupId = post.getPostId();
		this.text = post.getMessage();
		this.firstDate = simplePost.getCreatedTime();// .getTime();
		this.lastDate = simplePost.getCreatedTime();// .getTime();
		this.userQuantity = 1;
		this.postQuantity = 1;
		this.type = TYPE_RELEVANT_ALERT_MESSAGE;

		this.arraysSimilarPosts = new ArrayList<Post>(1);
		this.arraysSimilarPosts.add(post);

		// We need to use a cost function, but for now, we have only alertLevel
		// of classification
		List<PostExtraInfo> extraInfoList = simplePost.getPostExtraInfo();
		PostClassificationData postClassification = (PostClassificationData) extraInfoList
				.get(0);
		this.burstNumber = postClassification.getAlertLevel();
	}

	/**
	 * Read posts from database
	 * 
	 * @throws PropertyVetoException
	 */
	public PostAlertGroup() throws PropertyVetoException {

	}

	public String getGroupId() {
		return groupId;
	}

	public void setGroupId(String groupId) {
		this.groupId = groupId;
	}

	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text.replaceAll("[\'\"\\p{Cc}\\p{Cf}\\p{Co}\\p{Cn}]", "?");
	}

	public int getLogicalControl() {
		return logicalControl;
	}

	public void setLogicalControl(int logicalControl) {
		this.logicalControl = logicalControl;
	}

	public int getUserQuantity() {
		return userQuantity;
	}

	public void setUserQuantity(int userQuantity) {
		this.userQuantity = userQuantity;
	}

	public int getPostQuantity() {
		return postQuantity;
	}

	public void setPostQuantity(int postQuantity) {
		this.postQuantity = postQuantity;
	}

	public Date getFirstDate() {
		return firstDate;
	}

	public void setFirstDate(Date firstDate) {
		this.firstDate = firstDate;
	}

	/**
	 * Set first post date using a string in the following format: yyyy/MM/dd
	 * 
	 * @param firstDate
	 */
	public void setFirstDate(String firstDate) {
		try {
			this.firstDate = DateManager.formatterDate.parse(firstDate);
		} catch (ParseException pe) {
			System.out.println("Error while parsing group post first date!");
		}
	}

	public Date getLastDate() {
		return lastDate;
	}

	public void setLastDate(Date lastDate) {
		this.lastDate = lastDate;
	}

	/**
	 * Set first post date using a string in the following format: yyyy/MM/dd
	 * 
	 * @param lastDate
	 */
	public void setLastDate(String lastDate) {
		try {
			this.lastDate = DateManager.formatterDate.parse(lastDate);
		} catch (ParseException pe) {
			System.out.println("Error while parsing group post first date!");
		}
	}

	/**
	 * Get a String with general information about the group to be
	 * written/printed like a TXT.
	 * 
	 * @return - a String with general informations from the group.
	 */
	public String getGeneralGroupInformationTXT() {
		return "groupId:\t" + this.groupId + "\tlogicalControl:\t"
				+ this.logicalControl + "\tpostsNumber:\t" + this.postQuantity
				+ "\tusersNumber:\t" + this.userQuantity + "\tburstNumber:\t"
				+ this.burstNumber + "\ttype:\t" + this.type + "\tfirstDate:\t"
				+ DateManager.formatterDate.format(this.firstDate)
				+ "\tlastDate:\t"
				+ DateManager.formatterDate.format(this.lastDate)
				+ "\tpostMessage:\t" + this.text;
	}

	/**
	 * Get general informations about this group of similar posts.
	 * 
	 * @return - A JSONObject format.
	 */
	@SuppressWarnings("unchecked")
	public JSONObject getJSONGeneralGroupInformationObject() {
		JSONObject generalGroupInformation = new JSONObject();

		generalGroupInformation.put("groupId", this.groupId);
		generalGroupInformation.put("numberOfUsersThatPostThisMessages",
				this.userQuantity);
		generalGroupInformation.put("numberOfPostsThatComposeTheGroup",
				this.postQuantity);
		generalGroupInformation.put("postTextMessage", this.text);
		generalGroupInformation.put("firstDate",
				DateManager.formatterDate.format(this.firstDate));
		generalGroupInformation.put("lastDate",
				DateManager.formatterDate.format(this.lastDate));
		generalGroupInformation.put("burstNumber", this.burstNumber);
		generalGroupInformation.put("type", this.type);
		generalGroupInformation.put("logicalControl", this.logicalControl);

		return generalGroupInformation;
	}

	/**
	 * Get general informations about this group of similar posts.
	 * 
	 * @return - A String in JSON format.
	 */
	public String getJSONGeneralGroupInformation() {
		JSONObject generalGroupInformation = getJSONGeneralGroupInformationObject();
		return generalGroupInformation.toString() + ","; // @overrides
															// toString() in
															// JSONObject class
	}

	/**
	 * Get a JSON String with all similar posts.
	 * 
	 * @return - JSONArray with similar posts.
	 */
	public List<Post> getSimilarPostsGrouped() {
		return arraysSimilarPosts;
	}

	/**
	 * Get similar posts grouped in a JSON format.
	 * 
	 * @return - JSONArray with informations about this group;
	 */
	@SuppressWarnings("unchecked")
	public JSONArray getSimilarPostsGroupedInformationJSON() {
		JSONArray jsonArraySimilarPosts = new JSONArray();

		for (Post post : this.arraysSimilarPosts) {
			SimplifiedPost simplePost = (SimplifiedPost) post;
			jsonArraySimilarPosts.add(simplePost.getPostJSON());
		}

		return jsonArraySimilarPosts;
	}

	/**
	 * Get relevant alerts from database, this are the alerts!
	 * 
	 * @return - JSONArray with relevant alerts!
	 * @throws - PropertyVetoException
	 */
	@SuppressWarnings("unchecked")
	public JSONArray getJSONRelevantAlertMessagesFromDB()
			throws PropertyVetoException {
		JSONArray arrayOfRelevantAlertMessages = new JSONArray();
		PostsAlertsDAO alertsDAO = new PostsAlertsDAO();

		List<PostAlertGroup> listOfRelevantAlertMessagesFromDB = alertsDAO
				.getRelevantAlertMessages();

		for (PostAlertGroup alert : listOfRelevantAlertMessagesFromDB) {
			@SuppressWarnings("unused")
			JSONObject jsonAlert = new JSONObject();
			arrayOfRelevantAlertMessages.add(alert
					.getJSONGeneralGroupInformationObject());
		}

		return arrayOfRelevantAlertMessages;
	}

	/**
	 * Get the total number of the days of posts propagation, use an list with
	 * the days to calculate it.
	 * 
	 * @return - Total number of days!
	 */
	public int getTotalNumberOfDays() {
		return 1;
	}

	public List<Post> getArraysSimilarPosts() {
		return arraysSimilarPosts;
	}

	public void setArraysSimilarPosts(List<Post> arraysSimilarPosts) {
		this.arraysSimilarPosts = arraysSimilarPosts;
	}

	public float getBurstNumber() {
		return burstNumber;
	}

	public void setBurstNumber(int burstNumber) {
		this.burstNumber = burstNumber;
	}

	public String getAlert() {
		return alert;
	}

	public void setAlert(String alert) {
		this.alert = alert;
	}

	public int getType() {
		return type;
	}

	public void setType(int type) {
		this.type = type;
	}

}